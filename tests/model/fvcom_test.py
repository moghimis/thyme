from collections import namedtuple

import numpy
import pytest

from thyme.model.fvcom import node_to_centroid

NodeToCentroidValues = namedtuple(
    'NodeToCentroidValues',
    ['zeta',
     'h',
     'lat_node',
     'lon_node',
     'lat_centroid',
     'lon_centroid',
     'time_index',
     'expected_h_centroid',
     'expected_zeta_centroid'])


@pytest.fixture
def node_to_centroid_values():
    zeta = numpy.array(
        [
            [-0.146551, -0.146383, -0.145782, -0.146226, -0.145688, -0.145071, -0.146047, -0.145581, -0.145099,
             -0.144439, -0.145729, -0.145431, -0.144983, -0.144627, -0.144069, -0.145415, -0.145071, -0.144579,
             -0.144391, -0.143806, -0.144057,

             -0.169269, -0.169959, -0.170395, -0.170738, -0.166229, -0.166729, -0.167032, -0.162118, -0.162876,
             -0.163448, -0.163812, -0.158493, -0.159403, -0.159949, -0.160389
             ]
        ])

    h = numpy.array(
        [
            1.6438, 1.8724, 1.875, 2.0302, 1.9946, 2.0446, 2.1169, 2.1307, 2.1457, 2.2134, 2.1768, 2.178, 2.2341,
            2.2623, 2.331, 2.1949, 2.2047, 2.2817, 2.3537, 2.434, 2.404,

            31.461, 31.874, 32.37, 32.361, 30.565, 31.089, 31.196, 29.231, 29.033, 28.687, 28.761, 26.053, 25.788,
            26.267, 26.835
        ])
    lat_centroid = numpy.array(
        [
            30.260946, 30.262287, 30.260996, 30.259796, 30.26362, 30.262392, 30.261309, 30.260002, 30.258938, 30.264635,
            30.263693, 30.262672, 30.261517, 30.260561, 30.259289, 30.258574, 30.264799, 30.264191, 30.263008,
            30.262444, 30.261324, 30.260527, 30.259325, 30.259058, 30.260839, 30.259773,

            29.969425, 29.963093, 29.967611, 29.961212, 29.96579, 29.959322, 29.980326, 29.985025,
            29.978645, 29.983408, 29.976954, 29.981771, 29.996161, 30.001049, 29.994678, 29.999624,
            29.993172, 29.998173
        ])

    lon_centroid = numpy.array(
        [
            -88.126221, -88.124329, -88.124817, -88.123871, -88.122406, -88.122925, -88.12204, -88.122498, -88.12149,
            -88.120361, -88.120972, -88.120026, -88.120575, -88.119843, -88.1203, -88.119263, -88.118958, -88.118195,
            -88.118652, -88.117645, -88.117676, -88.118591, -88.118286, -88.117096, -88.116516, -88.116272,

            -88.264221, -88.25528, -88.245392, -88.236328, -88.226379, -88.217194, -88.265015,
            -88.256958, -88.246277, -88.238129, -88.227295, -88.219116, -88.260498, -88.253448,
            -88.241791, -88.23468, -88.222839, -88.215698
        ])

    lat_node = numpy.array(
        [
            30.260969, 30.262211, 30.259659, 30.263531, 30.26112, 30.258608, 30.264805, 30.262526, 30.260281, 30.257925,
            30.265354, 30.263748, 30.261744, 30.259661, 30.258137, 30.265295, 30.263531, 30.262054, 30.260176, 30.25886,
            30.260286,

            29.958637, 29.956696, 29.954746, 29.952793, 29.973944, 29.972195, 29.970428, 29.991339, 29.989796,
            29.988235, 29.986652, 30.007345, 30.006006, 30.004629, 30.003235
        ])

    lon_node = numpy.array(
        [
            -88.127625, -88.125763, -88.125275, -88.12384, -88.123413, -88.122894, -88.121857, -88.12149, -88.121185,
            -88.120422, -88.119629, -88.119568, -88.119049, -88.119293, -88.118073, -88.117676, -88.11734, -88.116516,
            -88.117462, -88.115784, -88.11557,

            -88.265167, -88.246277, -88.227234, -88.207947, -88.254395, -88.235504, -88.2164, -88.267578,
            -88.248901, -88.230011, -88.210937, -88.265045, -88.246429, -88.2276, -88.208527
        ])

    time_index = 0

    expected_h_centroid = numpy.array(
        [
            1.79706003, 1.96634453, 1.91399347, 1.97068808, 2.09215354, 2.05125885, 2.08959921, 2.06159611, 2.13525152,
            2.15697391, 2.14185806, 2.1812977, 2.17015265, 2.2140166,  2.20713333, 2.26888473, 2.18323025, 2.19253056,
            2.20559465, 2.23989205, 2.28985895, 2.28394075, 2.31515434, 2.37337259, 2.3464489, 2.39725858,

            30.74697778, 31.29994912, 31.1760438, 31.77788929, 31.55164158, 31.9756924, 30.00374208, 29.60978718,
            30.22881187, 29.6028045, 30.32372402, 29.54809818, 28.10520577, 26.95770733, 27.83656214, 26.91390017,
            27.90491454, 27.28733678

        ])

    expected_zeta_centroid = numpy.array(
        [
           -0.1462386, -0.14609691, -0.14595087, -0.1455159, -0.14595329, -0.14583367, -0.14545806, -0.14528592,
           -0.14486764, -0.14573735, -0.1456864, -0.14532972, -0.14522106, -0.14490293, -0.14472167, -0.14437832,
           -0.14552505, -0.14530566, -0.14516168, -0.14487977, -0.14465093, -0.14466511, -0.1443643, -0.14408686,
           -0.1443424, -0.14408446,

           -0.16695492, -0.16848552, -0.16763914, -0.16902775, -0.16805193, -0.16938841, -0.16457143, -0.16374129,
           -0.16527793, -0.16435127, -0.16573603, -0.16476413, -0.16116232, -0.16025768, -0.16190908, -0.16093319,
           -0.16240301, -0.16138305
        ])

    return NodeToCentroidValues(zeta, h, lat_node, lon_node, lat_centroid, lon_centroid, time_index, expected_h_centroid, expected_zeta_centroid)


def test_node_to_centroid(node_to_centroid_values):
    """Test horizontal interpolation from nodes to centroids(elements)."""
    h_centroid, zeta_centroid = node_to_centroid(node_to_centroid_values.zeta, node_to_centroid_values.h,
                                                 node_to_centroid_values.lon_node, node_to_centroid_values.lat_node,
                                                 node_to_centroid_values.lon_centroid,
                                                 node_to_centroid_values.lat_centroid,
                                                 node_to_centroid_values.time_index)
    print(f"h_centroid: {h_centroid}")
    print(f"zeta_centroid: {zeta_centroid}")
    assert numpy.allclose(h_centroid, node_to_centroid_values.expected_h_centroid)
    assert numpy.allclose(zeta_centroid, node_to_centroid_values.expected_zeta_centroid)